swagger: '2.0'
schemes:
  - http
  - https
host: oceanprotocol.com
basePath: /api/v1/keeper
info:
  description: |
    # Introduction
    The PK will expose some external API’s to interact with the module. Those
    API’s could be integrated in different ways (RESTful, RPC, Pub/Sub). In
    this section we will describe the RESTful interface as main reference.
    Additional definitions will be added posteriorly.

    The PK API will be the interface between the platform consumers and the
    underlying business logic implemented by the Keeper. The capabilities to
    implement are quite different and can be divided in independent domains.
    The service layer will organize the code in independent resources
    implementing the different business domains, encapsulating the complexity
    of those domains.

    The implementation of the RESTful API must be HATEOAS compliance. It means
    the requirement is to implement the Richardson Maturity Model Level 3.

    The most relevant domains and microservices to be implemented are

    * Actors RESTful API
    * Assets RESTful API
    * Curation RESTful API
    * Market RESTful API
    * Verification RESTful API
    * Search RESTful API
  version: 0.0.1
  title: ProtoKeeper Services
tags:
  - name: actor
    description: Operations about actors
  - name: asset
    description: Operations about assets
  - name: curation
    description: Operations about curation
  - name: market
    description: Market operations
  - name: verification
    description: Operations about verifications
  - name: search
    description: Asset search
x-tagGroups:
  - name: Actor Management
    tags:
      - actor
  - name: Asset Management
    tags:
      - asset
  - name: Curation Management
    tags:
      - curation
  - name: Market Management
    tags:
      - market
  - name: Verification Management
    tags:
      - verification
  - name: Search interface
    tags:
      - search
securityDefinitions:
  protokeeper_auth:
    description: |
      Get access to data while protecting your account credentials.
      OAuth2 is also a safer and more secure way to give you access.
    type: oauth2
    authorizationUrl: null
    flow: implicit
    scopes:
      'write:actors': modify actors
      'read:actors': read actors
paths:
  /actors:
    post:
      tags:
        - actor
      summary: Register an actor
      description: |
        As soon as an actor is allowed into the system, the metadata
        describing what that actor is and does is appended to the Actor
        Registry.
      operationId: registerActor
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Registered actor object
          required: true
          schema:
            $ref: '#/definitions/record:com.oceanprotocol.core.keeper.models.Actor'
      responses:
        '201':
          description: successful operation
          schema:
            $ref: '#/definitions/record:com.oceanprotocol.core.keeper.models.Actor'
  '/actors/{actorId}':
    get:
      tags:
        - actor
      summary: Get an actor
      description: ''
      operationId: getActorById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: actorId
          in: path
          description: The id of the actor that needs to be fetched.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/record:com.oceanprotocol.core.keeper.models.Actor'
        '400':
          description: Invalid actor id supplied
        '404':
          description: Actor not found
    put:
      tags:
        - actor
      summary: Update an actor
      description: ''
      operationId: updateActor
      produces:
        - application/xml
        - application/json
      parameters:
        - name: actorId
          in: path
          description: The id of the actor to be updated.
          required: true
          type: string
        - in: body
          name: body
          description: Updated actor object
          required: true
          schema:
            $ref: '#/definitions/record:com.oceanprotocol.core.keeper.models.Actor'
      responses:
        '200':
          description: Actor was updated successfully
          schema:
            $ref: '#/definitions/record:com.oceanprotocol.core.keeper.models.Actor'
        '400':
          description: Invalid actor supplied
        '404':
          description: Actor not found
    delete:
      tags:
        - actor
      summary: Delete an actor
      description: ''
      operationId: deleteActor
      produces:
        - application/xml
        - application/json
      parameters:
        - name: actorId
          in: path
          description: The id of the actor to be deleted.
          required: true
          type: string
      responses:
        '204':
          description: Actor was deleted successfully
        '400':
          description: Invalid id supplied
        '404':
          description: Actor not found
  /assets:
    post:
      tags:
        - asset
      summary: Register an asset
      description: >
        Registering of an Asset (dataset or service). Metadata is provided,

        including the verification proofs. Should return a HTTP 201 if
        everything

        goes OK, HTTP 422 if object already exists or HTTP 500 if error.
      operationId: registerAsset
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Registered metadata object
          required: true
          schema:
            $ref: '#/definitions/record:com.oceanprotocol.core.keeper.models.Metadata'
      responses:
        '201':
          description: successful operation
          schema:
            $ref: '#/definitions/record:com.oceanprotocol.core.keeper.models.Metadata'
  '/assets/{assetId}':
    get:
      tags:
        - asset
      summary: Get an asset
      description: ''
      operationId: getAssetById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: assetId
          in: path
          description: The id of the asset that needs to be fetched.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/record:com.oceanprotocol.core.keeper.models.Metadata'
        '400':
          description: Invalid asset id supplied
        '404':
          description: Asset not found
    put:
      tags:
        - asset
      summary: Update an asset
      description: ''
      operationId: updateAsset
      produces:
        - application/xml
        - application/json
      parameters:
        - name: assetId
          in: path
          description: The id of the asset to be updated.
          required: true
          type: string
        - in: body
          name: body
          description: Updated asset object
          required: true
          schema:
            $ref: '#/definitions/record:com.oceanprotocol.core.keeper.models.Metadata'
      responses:
        '200':
          description: Asset was updated successfully
          schema:
            $ref: '#/definitions/record:com.oceanprotocol.core.keeper.models.Metadata'
        '400':
          description: Invalid asset supplied
        '404':
          description: Asset not found
    delete:
      tags:
        - asset
      summary: Delete an asset
      description: ''
      operationId: deleteAsset
      produces:
        - application/xml
        - application/json
      parameters:
        - name: assetId
          in: path
          description: The id of the asset to be deleted.
          required: true
          type: string
      responses:
        '204':
          description: Asset was deleted successfully
        '400':
          description: Invalid id supplied
        '404':
          description: Asset not found
  '/curation/assets/{assetId}':
    post:
      tags:
        - curation
      summary: Curate an asset
      description: ''
      operationId: curateAsset
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Curation object
          required: true
          schema:
            $ref: '#/definitions/record:com.oceanprotocol.core.keeper.models.Curation'
      responses:
        '201':
          description: successful operation
          schema:
            $ref: '#/definitions/record:com.oceanprotocol.core.keeper.models.Curation'
  /market/contracts:
    post:
      tags:
        - market
      summary: Contract definition
      description: Contract definition given by the publisher
      operationId: defineContract
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Contract definition
          required: true
          schema:
            $ref: '#/definitions/record:com.oceanprotocol.core.keeper.models.Contract'
      responses:
        '201':
          description: successful operation
          schema:
            $ref: '#/definitions/record:com.oceanprotocol.core.keeper.models.Contract'
  /market/bid:
    post:
      tags:
        - market
      summary: Bid creation
      description: Creation of a Bid.
      operationId: createBid
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Bid object to create
          required: true
          schema:
            $ref: '#/definitions/record:com.oceanprotocol.core.keeper.models.Bid'
      responses:
        '201':
          description: successful operation
          schema:
            $ref: '#/definitions/record:com.oceanprotocol.core.keeper.models.Bid'
  /market/matched:
    post:
      tags:
        - market
      summary: Match
      description: Creation of a Match.
      operationId: createMatch
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Match object to create
          required: true
          schema:
            $ref: '#/definitions/record:com.oceanprotocol.core.keeper.models.Match'
      responses:
        '201':
          description: successful operation
          schema:
            $ref: '#/definitions/record:com.oceanprotocol.core.keeper.models.Match'
  /market/proofs:
    post:
      tags:
        - market
      summary: Verification Proof
      description: Provider gives a proof about the service/asset has been provided.
      operationId: createProof
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Proof object to create
          required: true
          schema:
            $ref: >-
              #/definitions/record:com.oceanprotocol.core.keeper.models.VerificationProof
      responses:
        '201':
          description: successful operation
          schema:
            $ref: >-
              #/definitions/record:com.oceanprotocol.core.keeper.models.VerificationProof
  '/market/access/{contractId}':
    get:
      tags:
        - market
      summary: Access Control
      description: |
        Given the contractId will check if everything is ok before
        providing access.
      operationId: getAccessByContractId
      produces:
        - application/xml
        - application/json
      parameters:
        - name: contractId
          in: path
          description: The id of the contract for which a resource is being accessed.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: >-
              #/definitions/record:com.oceanprotocol.core.keeper.models.Consumption
        '400':
          description: Invalid contract id supplied
        '404':
          description: Contract not found
  '/market/authorize/{contractId}':
    post:
      tags:
        - market
      summary: Authorization for asset consumption
      description: |
        The publisher authorizes the consumption of an asset by a consumer.
      operationId: registerAsset
      produces:
        - application/xml
        - application/json
      parameters:
        - name: contractId
          in: path
          description: The id of the contract for which authorization is granted.
          required: true
          type: string
        - in: body
          name: body
          description: Contract used for authorization
          required: true
          schema:
            $ref: '#/definitions/record:com.oceanprotocol.core.keeper.models.Contract'
      responses:
        '201':
          description: successful operation
          schema:
            $ref: '#/definitions/record:com.oceanprotocol.core.keeper.models.Contract'
  '/market/settlement/{contractId}':
    post:
      tags:
        - market
      summary: Settlement
      description: |
        Once enough proofs are provided, the contract goes into settlement.
      operationId: registerAsset
      produces:
        - application/xml
        - application/json
      parameters:
        - name: contractId
          in: path
          description: The id of the contract being settled.
          required: true
          type: string
        - in: body
          name: body
          description: Contract used for settlement
          required: true
          schema:
            $ref: '#/definitions/record:com.oceanprotocol.core.keeper.models.Contract'
      responses:
        '201':
          description: successful operation
          schema:
            $ref: '#/definitions/record:com.oceanprotocol.core.keeper.models.Contract'
  '/market/contracts/{contractId}':
    put:
      tags:
        - market
      summary: Contract signature
      description: The contract is signed by the client.
      operationId: signedContract
      produces:
        - application/xml
        - application/json
      parameters:
        - name: contractId
          in: path
          description: The id of the contract to be signed.
          required: true
          type: string
        - in: body
          name: body
          description: Signed contract object
          required: true
          schema:
            $ref: '#/definitions/record:com.oceanprotocol.core.keeper.models.Contract'
      responses:
        '200':
          description: Contract was updated successfully
          schema:
            $ref: '#/definitions/record:com.oceanprotocol.core.keeper.models.Contract'
        '400':
          description: Invalid contract supplied
        '404':
          description: Contract not found
  /verifications/:
    post:
      tags:
        - verification
      summary: Verification challenge
      description: |
        Verification challenge about service provided.
        A pre-appointed verifier and/or the client challenges the service
        to provide proofs that the requested service is delivered according
        to integrity specifications.
      operationId: createVerificationRequest
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Verification request object to create
          required: true
          schema:
            $ref: >-
              #/definitions/record:com.oceanprotocol.core.keeper.models.VerificationRequest
      responses:
        '201':
          description: successful operation
          schema:
            $ref: >-
              #/definitions/record:com.oceanprotocol.core.keeper.models.VerificationRequest
  /verifications/proofs:
    post:
      tags:
        - verification
      summary: Create Proof validation
      description: |
        The service accepts the challenge, computes the proof
        and stores this on-chain with a reference to the contract.
      operationId: createVerificationRequest
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Verification proof object to create
          required: true
          schema:
            $ref: >-
              #/definitions/record:com.oceanprotocol.core.keeper.models.VerificationProof
      responses:
        '201':
          description: successful operation
          schema:
            $ref: >-
              #/definitions/record:com.oceanprotocol.core.keeper.models.VerificationProof
  '/verifications/proofs/{proofId}':
    get:
      tags:
        - verification
      summary: Get verification proof
      description: ''
      operationId: getProofById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: proofId
          in: path
          description: The id of the proof that needs to be fetched.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: >-
              #/definitions/record:com.oceanprotocol.core.keeper.models.VerificationProof
        '400':
          description: Invalid proof id supplied
        '404':
          description: Proof not found
  /verifications/whitelisting:
    post:
      tags:
        - verification
      summary: Actor whitelisting
      description: |
        A verifier send a whitelisting request approving or denying to an actor.
      operationId: createVerificationRequest
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Whitelisting request object
          required: true
          schema:
            $ref: >-
              #/definitions/record:com.oceanprotocol.core.keeper.models.Whitelisting
      responses:
        '201':
          description: successful operation
          schema:
            $ref: >-
              #/definitions/record:com.oceanprotocol.core.keeper.models.Whitelisting
  /search/assets:
    get:
      tags:
        - search
      summary: Search assets
      description: ''
      operationId: searchAssets
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/record:com.oceanprotocol.core.keeper.models.Metadata'
        '404':
          description: Asset not found
definitions:
  'record:com.oceanprotocol.core.keeper.models.Actor':
    type: object
    required:
      - actorId
      - name
      - publicKey
      - creationDatetime
      - updateDatetime
      - actorType
      - attributes
    additionalProperties: false
    properties:
      actorId:
        type: string
      name:
        type: string
      publicKey:
        type: string
      creationDatetime:
        type: integer
        minimum: -9223372036854776000
        maximum: 9223372036854776000
      updateDatetime:
        type: integer
        minimum: -9223372036854776000
        maximum: 9223372036854776000
      actorType:
        $ref: '#/definitions/enum:com.oceanprotocol.core.keeper.models.ActorType'
      attributes:
        type: array
        items:
          $ref: >-
            #/definitions/record:com.oceanprotocol.core.keeper.models.ActorAttribute
  'record:com.oceanprotocol.core.keeper.models.ActorAttribute':
    type: object
    required:
      - name
      - description
    additionalProperties: false
    properties:
      name:
        type: string
      description:
        type: string
  'enum:com.oceanprotocol.core.keeper.models.ActorType':
    enum:
      - PUBLISHER
      - CONSUMER
      - MARKETPLACE
      - CURATOR
      - KEEPER
  'record:com.oceanprotocol.core.keeper.models.Metadata':
    type: object
    required:
      - metadataId
      - publisherId
      - name
      - marketplaceId
      - creationDatetime
      - updateDatetime
      - contentType
      - proofType
      - mimeType
      - parameters
      - marketplaceAttributes
      - attributes
      - verificationProofs
      - prices
    additionalProperties: false
    properties:
      metadataId:
        type: string
      publisherId:
        type: string
      name:
        type: string
      marketplaceId:
        oneOf:
          - type: 'null'
          - type: string
      creationDatetime:
        type: integer
        minimum: -9223372036854776000
        maximum: 9223372036854776000
      updateDatetime:
        type: integer
        minimum: -9223372036854776000
        maximum: 9223372036854776000
      contentType:
        $ref: '#/definitions/enum:com.oceanprotocol.core.keeper.models.ContentType'
      proofType:
        $ref: '#/definitions/enum:com.oceanprotocol.core.keeper.models.ProofType'
      mimeType:
        oneOf:
          - type: 'null'
          - type: string
      parameters:
        type: array
        items:
          $ref: >-
            #/definitions/record:com.oceanprotocol.core.keeper.models.MetadataParameters
      marketplaceAttributes:
        type: array
        items:
          $ref: >-
            #/definitions/record:com.oceanprotocol.core.keeper.models.MetadataMarketplaceAttributes
      attributes:
        type: array
        items:
          $ref: >-
            #/definitions/record:com.oceanprotocol.core.keeper.models.MetadataAttribute
      verificationProofs:
        type: array
        items:
          $ref: >-
            #/definitions/record:com.oceanprotocol.core.keeper.models.AssetVerificationProof
      prices:
        type: array
        items:
          $ref: '#/definitions/record:com.oceanprotocol.core.keeper.models.AssetPrice'
  'enum:com.oceanprotocol.core.keeper.models.ContentType':
    enum:
      - ASSET
      - SERVICE
  'enum:com.oceanprotocol.core.keeper.models.ProofType':
    enum:
      - POC
      - POW
      - POS
      - POR
      - POST
  'record:com.oceanprotocol.core.keeper.models.MetadataParameters':
    type: object
    required:
      - name
      - value
    additionalProperties: false
    properties:
      name:
        type: string
      value:
        type: string
  'record:com.oceanprotocol.core.keeper.models.MetadataMarketplaceAttributes':
    type: object
    required:
      - name
      - value
    additionalProperties: false
    properties:
      name:
        type: string
      value:
        type: string
  'record:com.oceanprotocol.core.keeper.models.MetadataAttribute':
    type: object
    required:
      - name
      - description
    additionalProperties: false
    properties:
      name:
        type: string
      description:
        type: string
  'record:com.oceanprotocol.core.keeper.models.AssetVerificationProof':
    type: object
    required:
      - verificationId
      - name
      - agreement
      - description
      - expectedResult
    additionalProperties: false
    properties:
      verificationId:
        type: string
      name:
        type: string
      agreement:
        type: string
      description:
        oneOf:
          - type: 'null'
          - type: string
      expectedResult:
        type: string
  'record:com.oceanprotocol.core.keeper.models.AssetPrice':
    type: object
    required:
      - name
      - scheme
      - agreement
      - description
      - quantity
      - price
    additionalProperties: false
    properties:
      name:
        type: string
      scheme:
        type: string
      agreement:
        type: string
      description:
        oneOf:
          - type: 'null'
          - type: string
      quantity:
        type: integer
        minimum: -2147483648
        maximum: 2147483647
      price:
        type: number
  'record:com.oceanprotocol.core.keeper.models.Curation':
    type: object
    required:
      - curationId
      - curatorId
      - metadataId
      - creationDatetime
      - rating
      - review
      - stake
    additionalProperties: false
    properties:
      curationId:
        type: string
      curatorId:
        type: string
      metadataId:
        type: string
      creationDatetime:
        type: integer
        minimum: -9223372036854776000
        maximum: 9223372036854776000
      rating:
        type: integer
        minimum: -2147483648
        maximum: 2147483647
      review:
        type: string
      stake:
        type: number
  'record:com.oceanprotocol.core.keeper.models.Bid':
    type: object
    required:
      - clientId
      - metadataId
      - creationDatetime
      - additionalVerificationProofs
      - bid
    additionalProperties: false
    properties:
      clientId:
        type: string
      metadataId:
        type: string
      creationDatetime:
        type: integer
        minimum: -9223372036854776000
        maximum: 9223372036854776000
      additionalVerificationProofs:
        type: array
        items:
          $ref: >-
            #/definitions/record:com.oceanprotocol.core.keeper.models.BidVerificationProof
      bid:
        type: number
  'record:com.oceanprotocol.core.keeper.models.BidVerificationProof':
    type: object
    required:
      - verificationId
      - name
      - agreement
      - description
      - expectedResult
    additionalProperties: false
    properties:
      verificationId:
        type: string
      name:
        type: string
      agreement:
        type: string
      description:
        oneOf:
          - type: 'null'
          - type: string
      expectedResult:
        type: string
  'record:com.oceanprotocol.core.keeper.models.Consumption':
    type: object
    required:
      - contractId
      - creationDatetime
      - accessToken
    additionalProperties: false
    properties:
      contractId:
        type: string
      creationDatetime:
        type: integer
        minimum: -9223372036854776000
        maximum: 9223372036854776000
      accessToken:
        $ref: '#/definitions/record:com.oceanprotocol.core.keeper.models.AccessToken'
  'record:com.oceanprotocol.core.keeper.models.AccessToken':
    type: object
    required:
      - token
      - expireDatetime
      - requests
    additionalProperties: false
    properties:
      token:
        type: string
      expireDatetime:
        oneOf:
          - type: 'null'
          - type: integer
            minimum: -2147483648
            maximum: 2147483647
      requests:
        oneOf:
          - type: 'null'
          - type: integer
            minimum: -2147483648
            maximum: 2147483647
  'record:com.oceanprotocol.core.keeper.models.Contract':
    type: object
    required:
      - contractId
      - matchId
      - providerId
      - clientId
      - metadataId
      - contractState
      - creationDatetime
      - verificationProofs
      - contractSettlement
      - contractResolution
    additionalProperties: false
    properties:
      contractId:
        type: string
      matchId:
        type: string
      providerId:
        type: string
      clientId:
        type: string
      metadataId:
        type: string
      contractState:
        $ref: '#/definitions/enum:com.oceanprotocol.core.keeper.models.ContractState'
      creationDatetime:
        type: integer
        minimum: -9223372036854776000
        maximum: 9223372036854776000
      verificationProofs:
        type: array
        items:
          $ref: >-
            #/definitions/record:com.oceanprotocol.core.keeper.models.ContractVerificationProof
      contractSettlement:
        $ref: >-
          #/definitions/record:com.oceanprotocol.core.keeper.models.ContractSettlement
      contractResolution:
        ref: >-
          #/definitions/record:com.oceanprotocol.core.keeper.models.ContractResolution
  'enum:com.oceanprotocol.core.keeper.models.ContractState':
    enum:
      - DRAFT
      - SIGNED
      - SETTLED
      - CANCELED
  'record:com.oceanprotocol.core.keeper.models.ContractVerificationProof':
    type: object
    required:
      - verificationId
      - name
      - agreement
      - description
      - expectedResult
      - proofStatus
    additionalProperties: false
    properties:
      verificationId:
        type: string
      name:
        type: string
      agreement:
        type: string
      description:
        oneOf:
          - type: 'null'
          - type: string
      expectedResult:
        type: string
      proofStatus:
        $ref: '#/definitions/enum:com.oceanprotocol.core.keeper.models.ProofStatus'
  'record:com.oceanprotocol.core.keeper.models.ContractSettlement':
    type: object
    required:
      - warrantiesDescription
      - fee
    additionalProperties: false
    properties:
      warrantiesDescription:
        type: string
      fee:
        type: number
  'record:com.oceanprotocol.core.keeper.models.ContractResolution':
    type: object
    required:
      - executeCondition
      - abortCondition
    additionalProperties: false
    properties:
      executeCondition:
        type: string
      abortCondition:
        type: string
  'record:com.oceanprotocol.core.keeper.models.Match':
    type: object
    required:
      - providerId
      - clientId
      - metadataId
      - bidId
      - creationDatetime
      - ask
      - bid
    additionalProperties: false
    properties:
      providerId:
        type: string
      clientId:
        type: string
      metadataId:
        type: string
      bidId:
        type: string
      creationDatetime:
        type: integer
        minimum: -9223372036854776000
        maximum: 9223372036854776000
      ask:
        type: number
      bid:
        type: number
  'record:com.oceanprotocol.core.keeper.models.VerificationProof':
    type: object
    required:
      - verificationRequestId
      - contractId
      - verifierId
      - creationDatetime
      - proofs
    additionalProperties: false
    properties:
      verificationRequestId:
        type: string
      contractId:
        type: string
      verifierId:
        type: string
      creationDatetime:
        type: integer
        minimum: -9223372036854776000
        maximum: 9223372036854776000
      proofs:
        type: array
        items:
          $ref: '#/definitions/record:com.oceanprotocol.core.keeper.models.ProofsList'
  'record:com.oceanprotocol.core.keeper.models.ProofsList':
    type: object
    required:
      - verificationProofId
      - verificationProof
      - proofStatus
    additionalProperties: false
    properties:
      verificationProofId:
        type: string
      verificationProof:
        type: string
      proofStatus:
        $ref: '#/definitions/enum:com.oceanprotocol.core.keeper.models.ProofStatus'
  'enum:com.oceanprotocol.core.keeper.models.ProofStatus':
    enum:
      - DEFINED
      - VERIFIED
      - FAILS
  'record:com.oceanprotocol.core.keeper.models.VerificationRequest':
    type: object
    required:
      - verificationRequestId
      - contractId
      - validatorId
      - creationDatetime
      - proofs
    additionalProperties: false
    properties:
      verificationRequestId:
        type: string
      contractId:
        type: string
      validatorId:
        type: string
      creationDatetime:
        type: integer
        minimum: -9223372036854776000
        maximum: 9223372036854776000
      proofs:
        type: array
        items:
          $ref: >-
            #/definitions/record:com.oceanprotocol.core.keeper.models.ProofsListRequest
  'record:com.oceanprotocol.core.keeper.models.ProofsListRequest':
    type: object
    required:
      - verificationProofId
    additionalProperties: false
    properties:
      verificationProofId:
        type: string
  'record:com.oceanprotocol.core.keeper.models.Whitelisting':
    type: object
    required:
      - actorId
      - verifierId
      - whitelistingApproval
      - creationDatetime
      - stake
    additionalProperties: false
    properties:
      actorId:
        type: string
      verifierId:
        type: string
      whitelistingApproval:
        type: boolean
      creationDatetime:
        type: integer
        minimum: -9223372036854776000
        maximum: 9223372036854776000
      stake:
        type: number
  Id:
    type: integer
    format: int64

